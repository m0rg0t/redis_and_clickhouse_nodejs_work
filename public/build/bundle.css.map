{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "Button.svelte",
    "Details.svelte",
    "Field.svelte",
    "Icon.svelte",
    "Input.svelte",
    "Modal.svelte",
    "Nav.svelte",
    "App.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import {getEventsAction} from './utils';\n    import {current_component} from 'svelte/internal';\n    import Card from './Card.svelte';\n    import Icon from './Icon.svelte';\n\n    export let outline = null;\n    export let primary = null;\n    export let secondary = null;\n    export let dark = null;\n    export let error = null;\n    export let success = null;\n    export let clear = null;\n    export let loading = null;\n    export let icon = null;\n    export let iconRight = null;\n    export let dropdown = false;\n    export let open = false;\n    export let autoclose = false;\n    export let submit = false;\n\n    const events = getEventsAction(current_component);\n\n    const hasSlot = $$props.$$slots && $$props.$$slots !== undefined;\n\n    function dropdownAction(node,param) {\n\n      let autoclose = param;\n      let button = node.getElementsByTagName('summary')[0];\n\n      const clickOutside = () => {\n        if(!!node.open) node.open=false;\n      }\n\n      const clickButton = (e) => {\n        e.stopPropagation();\n      }\n\n      const clickInDD = (e) => {\n        e.stopPropagation();\n        if(autoclose) node.open=false;\n      }\n\n      node.addEventListener('click',clickInDD);\n      button.addEventListener('click',clickButton);\n      window.addEventListener('click',clickOutside);\n\n\n      return {\n        update: param => autoclose = param,\n        destroy: () => {\n          window.removeEventListener('click',clickOutside);\n          node.removeEventListener('click',clickInDD);\n          button.removeEventListener('click',clickButton);\n        }\n      }\n    }\n\n    $: clIcon = ( (icon !== null || iconRight !== null) && hasSlot);\n    $: clIcononly = (dropdown) ? (icon !== null && dropdown===true) : (icon !== null && !hasSlot);\n</script>\n\n\n{#if dropdown === false}\n<button  \n    class:button={1}\n    class:outline\n    class:primary\n    class:secondary\n    class:dark\n    class:error\n    class:success\n    class:clear\n    class:loading\n    class:icon={clIcon}\n    class:icon-only={clIcononly}\n\n    {...$$restProps}\n    use:events\n\n    type={submit ? 'submit' : null}\n>\n{#if icon} <span class=\"lefticon\"> <Icon src={icon} size=\"24px\"/> </span>{/if}\n<slot></slot>\n{#if iconRight} <span class=\"righticon\"> <Icon src={iconRight} size=\"24px\"/> </span>{/if}\n</button>\n{:else}\n  <details class=\"dropdown\" bind:open use:dropdownAction={autoclose}>\n    <summary\n        class:button={1}\n        class:outline\n        class:primary\n        class:secondary\n        class:dark\n        class:error\n        class:success\n        class:clear\n        class:loading\n        \n        class:icon={clIcon}\n        class:icon-only={clIcononly}\n\n        {...$$restProps}\n        use:events\n    >\n    {#if icon} <span class=\"lefticon\"> <Icon src={icon} size=\"24px\"/> </span>{/if}\n      {(dropdown !== true) ? dropdown : ''}\n    {#if iconRight} <span class=\"righticon\"> <Icon src={iconRight} size=\"24px\"/> </span>{/if}\n    </summary>\n    <Card style=\"z-index:1\"><slot></slot></Card>\n  </details>\n{/if}\n\n\n<style>\n@keyframes loading {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n}\n\n.loading {\n    color: transparent !important;\n    min-height: .8rem;\n    pointer-events: none;\n    position: relative;\n}\n\n.loading::after {\n    animation: loading 500ms infinite linear;\n    border: .2rem solid #FFFFFF;\n    border-radius: 50%;\n    border-right-color: transparent;\n    border-top-color: transparent;\n    content: \"\";\n    display: block;\n    height: .8rem;\n    left: 50%;\n    margin-left: -.4rem;\n    margin-top: -.4rem;\n    position: absolute;\n    top: 50%;\n    width: .8rem;\n    z-index: 1;\n}\n\n\n.icon > .lefticon{\n  margin: -10px 10px -10px 0px;\n}\n\n.icon > .righticon{\n  margin: -10px 0px -10px 10px;\n}\n\n\n.icon-only{\n  padding:.5rem .65rem;\n}\n\nsummary, button{\n  white-space: nowrap;\n}\n\nsummary::-webkit-details-marker {\n  display:none;\n}\n</style>\n",
    "<script>\n\timport {getEventsAction} from './utils';\n\timport {current_component} from 'svelte/internal';\n\n\texport let dropdown = false;\n\texport let open = false;\n\n\tconst events = getEventsAction(current_component);\n</script>\n\n<details class:dropdown use:events {...$$restProps} bind:open>\n\t<summary><slot name=\"summary\"></slot></summary>\n\t<slot></slot>\n</details>\n\n<style>\nsummary{\n\tcursor: pointer;\n}\n</style>",
    "<script>\n\timport { setContext } from 'svelte';\n\timport { writable } from 'svelte/store';\n\timport { getEventsAction } from './utils';\n\timport {current_component} from 'svelte/internal';\n\t\n\texport let label = false;\n\texport let error = false;\n\texport let success = false;\n\texport let grouped = false;\n\texport let gapless = false;\n\n\tconst events = getEventsAction(current_component);\n\n\tconst state = writable('');\n\tlet message = false;\n\n\tsetContext('field:state',state);\n\t\n\t$: if(gapless) grouped = true;\n\n\t$: \tif(typeof error === 'string'){\n\t\t\tstate.set('error');\n\t\t\tmessage = error;\n\t\t}\n\t\telse if(typeof success === 'string'){\n\t\t\tstate.set('success');\n\t\t\tmessage = success;\n\t\t}\n\t\telse {\n\t\t\tstate.set('');\n\t\t\tmessage = false;\n\t\t}\n</script>\n\n<div class:nomessage={!message} use:events {...$$restProps}>\n\t{#if label}\n\t\t<label>{label}</label>\n\t{/if}\n\t<p class:grouped class:gapless><slot/></p>\n\t{#if message}\n\t\t<p class=\"message\" class:text-error={error} class:text-success={success}>{message}</p>\n\t{:else}\n\t\t<p class=\"message\">&nbsp;</p>\n\t{/if}\n</div>\n\n<style>\np{\n\tmargin:0px;\n\tpadding:0px;\n}\n\n.message{\n\tfont-size: smaller;\n}\n\n.grouped:not(.gapless){\n\toverflow-x: auto;\n}\n</style>",
    "<script>\n\timport {getEventsAction} from './utils';\n\timport {current_component} from 'svelte/internal';\n\n\tconst events = getEventsAction(current_component);\n\n\texport let src = null;\n\texport let size = 1;\n\texport let color = null;\n\texport let flipH = null;\n\texport let flipV = null;\n\texport let rotate = 0;\n\texport let spin = false;\n\n\tlet path = false;\n\tlet use = false;\n\tlet url = false;\n\n\t//Icon source\n\t$: if(!!src && src.toLowerCase().trim().endsWith('.svg')) {\n\t\turl = src;\n\t\tpath = use = false;\n\t} else if(!!src && src.toLowerCase().trim().includes('.svg#')) {\n\t\tuse = src;\n\t\turl = path = false;\n\t} else if(!!src) {\n\t\tpath = src;\n\t\turl = use = false;\n\t}\n\n\t// SPIN properties\n\t$: inverse = (typeof spin !== \"boolean\" && spin < 0) ? true : false;\n\t$: spintime = Math.abs(spin === true ? 2 : spin);\n\t$: spinCW = (!!spin && !inverse);\n\t$: spinCCW = (!!spin && inverse);\n\n\t// size\n\tif(Number(size)) size = Number(size);\n\t\n\t// styles\n\tconst getStyles = () => {\n\t\tconst transform = [];\n\t\tconst styles = [];\n\t\tif (size !== null) {\n\t\t\tconst width = (typeof size === \"string\") ? size : `${size * 1.5}rem`;\n\t\t\tstyles.push(['width',width]);\n\t\t\tstyles.push(['height',width]);\n\t\t}\n\t\tstyles.push( ['fill', (color !== null) ? color: 'currentColor'] );\n\t\tif (flipH) {\n\t\t\ttransform.push(\"scaleX(-1)\");\n\t\t}\n\t\tif (flipV) {\n\t\t\ttransform.push(\"scaleY(-1)\");\n\t\t}\n\t\tif (rotate != 0) {\n\t\t\ttransform.push(`rotate(${rotate}deg)`);\n\t\n\t\t}\n\t\tif(transform.length > 0) {\n\t\t\tstyles.push( ['transform', transform.join(' ')] );\n\t\t\tstyles.push( ['transform-origin', 'center'] );\n\t\t}\n\t\treturn styles.reduce((cur,item)=>{\n\t\t\treturn `${cur} ${item[0]}:${item[1]};`;\n\t\t},'');\n\t}\n\t$: style = getStyles(size,color,flipH,flipV,rotate);\n\t$: aniStyle = (!!spin) ? `animation-duration: ${spintime}s` : undefined;\n</script>\n\n{#if url}\n\t<span {style} use:events {...$$restProps}>\n\t\t<img src=\"{url}\" alt=\"\" width=\"100%\" height=\"100%\" class:spinCW class:spinCCW style={aniStyle} />\n\t</span>\n{:else if use}\n\t<svg viewBox=\"0 0 24 24\" {style} use:events {...$$restProps}>\n\t\t<use xlink:href={use} class:spinCW class:spinCCW style={aniStyle}></use>\n\t</svg>\n{:else}\n\t<svg viewBox=\"0 0 24 24\" {style} use:events {...$$restProps}>\n\t{#if spin !== false}\n\t\t<g class:spinCW class:spinCCW style={aniStyle}>\n\t\t\t<path d={path}></path>\n\t\t</g>\n\t{:else}\n\t\t<path d={path}></path>\n\t{/if} \n\t</svg>\n{/if}\n\n\n<style>\n\t@keyframes spin { to { transform: rotate(360deg) } }\n\t@keyframes spin-inverse { to { transform: rotate(-360deg) } }\n\n\tsvg{\n\t\tvertical-align: middle;\n\t}\n\n\tspan{\n\t\tdisplay: inline-block;\n\t\tline-height:1;\n\t}\n\n\tspan img{\n\t\tpadding:0px;\n\t\tmargin:0px;\n\t\tvertical-align: middle;\n\t}\n\n\t.spinCW{\n\t\tanimation: spin linear 2s infinite;\n\t\ttransform-origin: center;\n\t}\n\n\t.spinCCW{\n\t\tanimation: spin-inverse linear 2s infinite;\n\t\ttransform-origin: center;\n\t}\n</style>",
    "<script>\n    import {getEventsAction} from './utils';\n\timport {getContext} from 'svelte';\n\timport {current_component} from 'svelte/internal';\n\t\n    export let value = '';\n    export let type = 'text';\n    export let error = null;\n    export let success = null;\n\t\n    export let password = false;\n    export let number = false;\n    export let textarea = false;\n    export let color = false;\n\texport let date = false;\n\texport let range = false;\n\n\t\n\tconst events = getEventsAction(current_component);\n\n\tconst onInput = e => {\n\t\tconst type = e.target.type;\n\t\tconst val = e.target.value;\n\n\t\tif(type === 'number' || type === 'range')\n\t\t\tvalue = val === '' ? undefined : +val;\n\t\telse\n\t\t\tvalue = val;\n\t}\n\n\tlet getState = getContext('field:state');\n\tlet state_unsubscribe = false;\n\tif(getState) {\n\t\tstate_unsubscribe = getState.subscribe(state => {\n\t\t\tif(state === 'error') \n\t\t\t\terror = true;\n\t\t\telse if(state === 'success') \n\t\t\t\tsuccess = true;\n\t\t\telse\n\t\t\t\tsuccess = error = false;\n\t\t});\n\t}\t\n\n\t\n\t$: if(password) type = 'password';\n\t$: if(number) type = 'number';\n\t$: if(textarea) type = 'textarea';\n\t$: if(color) type = 'color';\n\t$: if(date) type = 'date';\n\t$: if(range) type = 'range';\n</script>\n\n{#if type === 'textarea'}\n\t<textarea\n\t\tclass:error \n\t\tclass:success \n\t\tuse:events\n\t\t{...$$restProps}\n\t\ton:input={onInput}\n\t>{value}</textarea>\n{:else}\n\t<input type={type} \n\t\tclass:error \n\t\tclass:success \n\t\tuse:events\n\t\t{...$$restProps}\n\t\ton:input={onInput}\n\t\t{value}\n\t/>\n{/if}\n\n<style>\ninput[type=range]::-moz-range-track,input[type=range]::-webkit-slider-runnable-track {\n  background-color: var(--color-primary);\n}\n</style>",
    "<script>\n    import {getEventsAction} from './utils';\n    import {fade} from 'svelte/transition';\n    import {current_component} from 'svelte/internal';\n    \n    export let open = false;\n\n    const events = getEventsAction(current_component);\n\n    let is_header = $$props.$$slots && $$props.$$slots.header !== undefined;\n    let is_footer = $$props.$$slots && $$props.$$slots.footer !== undefined;\n</script>\n\n\n{#if open}\n<div class=\"container\" transition:fade={{ duration: 200 }}>\n    <div class=\"background\" on:click={e => open=false}/>\n    <div class:modal={1} use:events {...$$restProps}><slot></slot></div>\n</div>\n{/if}\n\n<style>\n.container{\n    position:fixed;\n    top:0px;\n    left:0px;\n    width:100vw;\n    height:100vh;\n    z-index:10000;\n}\n\n.background{\n    position:fixed;\n    top:0px;\n    left: 0px;\n    width:100vw;\n    height:100vh;\n    background-color:black;\n    opacity: 0.5;\n}\n\n.modal{\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    min-width:400px;\n    background-color: white;\n}\n</style>\n",
    "<script>\n\timport {getEventsAction} from './utils';\n\timport {current_component} from 'svelte/internal';\n\n\tconst events = getEventsAction(current_component);\n\n    let is_left = $$props.$$slots && $$props.$$slots.left !== undefined;\n    let is_center = $$props.$$slots && $$props.$$slots.center !== undefined;\n\tlet is_right = $$props.$$slots && $$props.$$slots.right !== undefined;\n</script>\n\n<nav class:nav={1} use:events {...$$restProps}>\n{#if is_left}\n\t<div class=\"nav-left\">\n\t\t<slot name=\"left\"></slot>\n\t</div>\n{/if}\n{#if is_center}\n\t<div class=\"nav-center\">\n\t\t<slot name=\"center\"></slot>\n\t</div>\n{/if}\n{#if is_right}\n\t<div class=\"nav-right\">\n\t\t<slot name=\"right\"></slot>\n\t</div>\n{/if}\n</nav>\n\n<style>\n\tnav{\n\t\twidth:100%;\n\t\tflex-direction: row;\n\t}\n\n\t:global(.nav-left) {\n\t\tjustify-content: flex-start\n\t}\n\t:global(.nav-right) {\n\t\tjustify-content: flex-end\n\t}\n</style>\n",
    "<script>\n  import \"chota\";\n  import { Input, Button, Container } from \"svelte-chota\";\n\n  let sendJson = `{ \"name\": \"Piter Pupkin\", \"phone\": \"1234567\" }`;\n  let sendResponse = \"\";\n\n  const sendJsonData = async data => {\n    console.log(\"sendJson\", sendJson);\n    const url = \"/v1/send\";\n    let response = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json;charset=utf-8\"\n      },\n      body: JSON.stringify({ data: sendJson })\n    });\n    let responseJson = await response.json();\n    sendResponse = JSON.stringify(responseJson);\n  };\n\n  /**\n   * Clear redis database from all keys\n   **/\n  const clearRedisDB = async () => {\n    const url = \"/v1/clearRedisDb\";\n    let response = await fetch(url, {\n      method: \"GET\"\n    });\n    let responseJson = await response.json();\n    if (responseJson) {\n      return true;\n    }\n    return false;\n  };\n</script>\n\n<style>\n  @media (min-width: 640px) {\n    main {\n      max-width: none;\n    }\n  }\n</style>\n\n<main>\n  <Container>\n    <form method=\"POST\" action=\"/v1/send\">\n      <p>\n        <Input\n          name=\"data\"\n          textarea\n          placeholder=\"Input json data\"\n          bind:value={sendJson} />\n      </p>\n      <p>\n        <Button\n          type=\"submit\"\n          primary\n          on:click={e => {\n            sendJsonData(sendJson);\n            e.preventDefault();\n          }}>\n          Send data\n        </Button>\n      </p>\n    </form>\n    <p>\n      <label for=\"sendResponse\">Response from server</label>\n      <Input name=\"sendResponse\" textarea value={sendResponse} />\n    </p>\n\n    <Button\n      on:click={e => {\n        clearRedisDB(sendJson);\n        e.preventDefault();\n      }}>\n      Clear redis DB\n    </Button>\n\n  </Container>\n</main>\n"
  ],
  "names": [],
  "mappings": "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"
}